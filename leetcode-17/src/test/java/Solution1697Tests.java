import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class Solution1697Tests {
    private final Solution1697 solution1697 = new Solution1697();

    @Test
    public void example1() {
        int n = 3;
        int[][] edgeList = UtUtils.stringToInts2("[[0,1,2],[1,2,4],[2,0,8],[1,0,16]]");
        int[][] queries = UtUtils.stringToInts2("[[0,1,2],[0,2,5]]");
        boolean[] expected = {false, true};
        Assertions.assertArrayEquals(expected, solution1697.distanceLimitedPathsExist(n, edgeList, queries));
    }

    @Test
    public void example2() {
        int n = 5;
        int[][] edgeList = UtUtils.stringToInts2("[[0,1,10],[1,2,5],[2,3,9],[3,4,13]]");
        int[][] queries = UtUtils.stringToInts2("[[0,4,14],[1,4,13]]");
        boolean[] expected = {true, false};
        Assertions.assertArrayEquals(expected, solution1697.distanceLimitedPathsExist(n, edgeList, queries));
    }

    // 补充用例
    @Test
    public void example3() {
        // https://leetcode.cn/submissions/detail/290981216/
        // 22 / 23 个通过测试用例
        // queries 存在两组 [2, 1, 1952]
        int n = 5;
        int[][] edgeList = UtUtils.stringToInts2("[[0,3,528],[3,0,44],[0,2,493],[3,4,989],[2,1,929],[3,0,900],[1,2,26],[4,0,684],[2,1,742],[4,0,881],[3,0,855],[4,2,322],[3,1,523],[2,1,362],[1,3,101],[4,0,862],[0,2,206],[4,1,972],[1,2,64],[1,0,459],[4,3,576],[2,1,726],[2,4,448],[0,1,293],[0,4,460],[4,2,920],[2,0,354],[2,0,54],[3,1,411],[2,4,419],[0,3,823],[4,1,72],[2,3,900],[2,0,954],[1,3,826],[2,3,730],[3,0,694]]");
        int[][] queries = UtUtils.stringToInts2("[[1,3,538],[1,2,1033],[0,4,366],[1,2,877],[1,4,939],[3,0,1088],[2,1,665],[2,3,209],[3,1,1469],[0,3,389],[3,0,1086],[1,4,1499],[0,3,554],[3,0,1634],[3,4,1216],[0,4,1465],[2,4,1641],[4,1,1271],[2,0,1020],[3,2,692],[3,0,1605],[0,4,898],[2,0,1573],[4,0,1573],[3,1,627],[4,1,769],[0,3,188],[1,0,1077],[1,2,1564],[1,3,1597],[1,0,1274],[1,4,71],[0,2,1544],[2,4,1149],[4,3,1449],[2,1,1716],[4,0,1659],[2,4,1722],[0,1,1761],[4,0,1496],[1,3,430],[2,3,1888],[1,4,618],[1,2,16],[4,2,1132],[0,2,233],[2,3,1696],[0,3,1960],[0,2,1070],[2,4,1676],[3,2,1362],[2,0,1066],[1,0,711],[3,2,286],[4,2,386],[3,2,1368],[4,3,1283],[1,3,1041],[1,4,1933],[1,3,1213],[0,4,36],[4,2,1148],[0,2,1301],[1,4,531],[0,3,120],[4,2,1919],[2,1,1503],[2,0,471],[3,4,922],[3,1,1854],[4,0,126],[1,0,1421],[0,1,1902],[0,1,214],[2,3,303],[0,2,677],[1,3,1756],[1,4,1119],[3,2,20],[2,1,1932],[2,4,1019],[1,4,976],[1,2,1383],[3,1,249],[3,0,817],[1,0,247],[1,4,1168],[0,4,1460],[1,4,1864],[1,2,521],[4,1,291],[1,3,1714],[2,3,1567],[3,0,1421],[0,1,613],[4,2,326],[1,4,251],[4,2,391],[1,4,1244],[3,2,764],[3,0,766],[3,2,337],[3,0,1917],[1,0,219],[2,1,616],[0,2,1568],[2,1,1952],[3,0,1026],[1,4,946],[1,0,1597],[1,3,1151],[4,0,1793],[3,4,1138],[1,2,1030],[1,4,640],[4,0,1396],[3,4,1548],[0,4,866],[4,2,1331],[2,4,490],[2,1,1952],[2,1,1642],[2,4,741],[3,1,246],[0,3,213],[3,1,690],[2,0,569],[1,4,1847],[3,0,118],[1,3,1413],[4,1,1194],[4,0,1975],[2,0,1050],[4,0,1324],[4,3,109],[1,4,623],[3,1,362],[1,4,1797],[1,0,430],[0,2,1357],[2,0,49],[2,0,884],[0,3,168],[3,0,1692],[1,3,1118],[1,2,1419],[0,2,868],[0,4,758],[2,1,1360],[0,4,677],[1,2,400],[4,0,155],[1,2,1234],[4,3,1469],[4,0,771],[0,1,543],[0,1,1702],[4,3,1713],[4,3,930],[1,0,1338],[1,3,771],[3,4,738],[3,1,1697],[4,0,1859],[2,1,720],[1,4,13],[0,2,1486],[4,3,1195],[0,1,459],[1,2,890],[3,0,1932],[1,0,673],[1,4,914],[3,4,670],[2,0,110],[3,1,1635],[0,2,857]]");
        boolean[] expected = {true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true};
        Assertions.assertArrayEquals(expected, solution1697.distanceLimitedPathsExist(n, edgeList, queries));
    }
}
/*
5
[[0,3,528],[3,0,44],[0,2,493],[3,4,989],[2,1,929],[3,0,900],[1,2,26],[4,0,684],[2,1,742],[4,0,881],[3,0,855],[4,2,322],[3,1,523],[2,1,362],[1,3,101],[4,0,862],[0,2,206],[4,1,972],[1,2,64],[1,0,459],[4,3,576],[2,1,726],[2,4,448],[0,1,293],[0,4,460],[4,2,920],[2,0,354],[2,0,54],[3,1,411],[2,4,419],[0,3,823],[4,1,72],[2,3,900],[2,0,954],[1,3,826],[2,3,730],[3,0,694]]
[[1,3,538],[1,2,1033],[0,4,366],[1,2,877],[1,4,939],[3,0,1088],[2,1,665],[2,3,209],[3,1,1469],[0,3,389],[3,0,1086],[1,4,1499],[0,3,554],[3,0,1634],[3,4,1216],[0,4,1465],[2,4,1641],[4,1,1271],[2,0,1020],[3,2,692],[3,0,1605],[0,4,898],[2,0,1573],[4,0,1573],[3,1,627],[4,1,769],[0,3,188],[1,0,1077],[1,2,1564],[1,3,1597],[1,0,1274],[1,4,71],[0,2,1544],[2,4,1149],[4,3,1449],[2,1,1716],[4,0,1659],[2,4,1722],[0,1,1761],[4,0,1496],[1,3,430],[2,3,1888],[1,4,618],[1,2,16],[4,2,1132],[0,2,233],[2,3,1696],[0,3,1960],[0,2,1070],[2,4,1676],[3,2,1362],[2,0,1066],[1,0,711],[3,2,286],[4,2,386],[3,2,1368],[4,3,1283],[1,3,1041],[1,4,1933],[1,3,1213],[0,4,36],[4,2,1148],[0,2,1301],[1,4,531],[0,3,120],[4,2,1919],[2,1,1503],[2,0,471],[3,4,922],[3,1,1854],[4,0,126],[1,0,1421],[0,1,1902],[0,1,214],[2,3,303],[0,2,677],[1,3,1756],[1,4,1119],[3,2,20],[2,1,1932],[2,4,1019],[1,4,976],[1,2,1383],[3,1,249],[3,0,817],[1,0,247],[1,4,1168],[0,4,1460],[1,4,1864],[1,2,521],[4,1,291],[1,3,1714],[2,3,1567],[3,0,1421],[0,1,613],[4,2,326],[1,4,251],[4,2,391],[1,4,1244],[3,2,764],[3,0,766],[3,2,337],[3,0,1917],[1,0,219],[2,1,616],[0,2,1568],[2,1,1952],[3,0,1026],[1,4,946],[1,0,1597],[1,3,1151],[4,0,1793],[3,4,1138],[1,2,1030],[1,4,640],[4,0,1396],[3,4,1548],[0,4,866],[4,2,1331],[2,4,490],[2,1,1952],[2,1,1642],[2,4,741],[3,1,246],[0,3,213],[3,1,690],[2,0,569],[1,4,1847],[3,0,118],[1,3,1413],[4,1,1194],[4,0,1975],[2,0,1050],[4,0,1324],[4,3,109],[1,4,623],[3,1,362],[1,4,1797],[1,0,430],[0,2,1357],[2,0,49],[2,0,884],[0,3,168],[3,0,1692],[1,3,1118],[1,2,1419],[0,2,868],[0,4,758],[2,1,1360],[0,4,677],[1,2,400],[4,0,155],[1,2,1234],[4,3,1469],[4,0,771],[0,1,543],[0,1,1702],[4,3,1713],[4,3,930],[1,0,1338],[1,3,771],[3,4,738],[3,1,1697],[4,0,1859],[2,1,720],[1,4,13],[0,2,1486],[4,3,1195],[0,1,459],[1,2,890],[3,0,1932],[1,0,673],[1,4,914],[3,4,670],[2,0,110],[3,1,1635],[0,2,857]]
 */