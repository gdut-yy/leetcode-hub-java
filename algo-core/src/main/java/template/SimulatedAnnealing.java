package template;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

/**
 * 模拟退火
 * https://www.bilibili.com/video/BV1gg411t7eL/
 */
public class SimulatedAnnealing {
    double[][] eff = {
            {0.4377274854027542, 0.2513307045107539, 0.07887905948617946, 0.4424067249309329, 0.30135553930386716, 0.4919495967127412, 0.04250055598921998, 0.1934938839043543, 0.06656575754003691, 0.1872305246551519, 0.8085874966743773, 0.9915129965755695, 0.7970874327629369, 0.6929576119476833, 0.07424070256608106, 0.4819040802928539, 0.844659960499854, 0.5426682678298242, 0.4892813996751071, 0.5345550834316563},
            {0.2987385996764935, 0.6012939428350309, 0.2964215012452306, 0.9853261437977852, 0.3361191178598797, 0.5017532351866225, 0.039336697211857286, 0.3379095337509954, 0.8652864874318669, 0.5222426383406739, 0.7300297327714018, 0.4748840556612878, 0.6737707795315735, 0.9770093904645297, 0.44597397711915954, 0.7324864577692906, 0.8815189715730399, 0.13967992895606152, 0.18787777286898366, 0.5305367373224763},
            {0.8792682965452103, 0.6957563673684228, 0.9705128400883175, 0.11711801642521436, 0.08813331940257874, 0.7296828986624265, 0.5419002539826927, 0.8870262233668171, 0.8150954405809054, 0.2919224484360132, 0.8302502139336927, 0.1636679872140846, 0.19881017783722232, 0.6627735345552929, 0.20340271210148386, 0.29600027913233296, 0.7411239479844168, 0.5321961237775333, 0.8921180488621693, 0.41526871474352245},
            {0.2019189196272051, 0.4487042055829371, 0.47641770806619044, 0.22071540732420492, 0.6983807042200524, 0.05542218614693717, 0.1632773229709944, 0.7190920106035029, 0.6945106112688636, 0.8276909385021471, 0.6943255854167362, 0.9297268324645689, 0.19268051357791438, 0.2541486503542154, 0.11380418823854999, 0.18505967681882218, 0.8462548249618908, 0.662000609560172, 0.29989522751954156, 0.8059714596831407},
            {0.9007810434279381, 0.17723090796300833, 0.11662474664899825, 0.6119004484643871, 0.8409765206878873, 0.6317985615672381, 0.27890175996412647, 0.9376501955097899, 0.37171576117808713, 0.58239915941396, 0.5398545623868372, 0.5719592308770296, 0.8934493325202811, 0.9891625189993664, 0.6074769707514678, 0.307315753834568, 0.9459615202843862, 0.5176955866720593, 0.27669913897198706, 0.5961651960762538},
            {0.18910135858239663, 0.8741693927522519, 0.6233489993823402, 0.14557246135617963, 0.36509679973467146, 0.06068727128550766, 0.7480718472510578, 0.1505646063770354, 0.344289960127096, 0.9469610930551009, 0.48112744734781, 0.26579386530943805, 0.7946068137694818, 0.09436137310842585, 0.6630852574439322, 0.3458250117634689, 0.23480145308793754, 0.3396955174820916, 0.10179009605165967, 0.44626493346417495},
            {0.23249212956132315, 0.24860861182784078, 0.07257227920493103, 0.5711167709627699, 0.29023226463050034, 0.1822890635383525, 0.27652748152446305, 0.17615455232859822, 0.5263364061186991, 0.3862013802827491, 0.5007933981738213, 0.49377840122739547, 0.6019077286264615, 0.20585691471451228, 0.8351018025317316, 0.3317250911978261, 0.4714901380053027, 0.26217271798021546, 0.19048610750212758, 0.11617165461072476},
            {0.44199463809365935, 0.177757427134972, 0.038876046357399385, 0.5991848944427837, 0.7130262183064358, 0.23550258555501036, 0.7464129196875583, 0.8311330120085803, 0.04146392969040624, 0.17214653041782646, 0.6086699355249414, 0.7105900449970964, 0.4241237350464738, 0.16201715448768284, 0.7125642434665191, 0.6674274704002879, 0.7245597002636686, 0.9299488647523588, 0.047598616990293996, 0.8092018500330336},
            {0.9835363444806678, 0.8474081712257647, 0.8681720864144329, 0.16661106869239783, 0.7474308783853161, 0.8121515305591313, 0.16905071942061367, 0.510705996903364, 0.12480122568316299, 0.6892778045491968, 0.2776912628846099, 0.5827083926772131, 0.4385816838208304, 0.10032695667175728, 0.9899616032354953, 0.4766998973954044, 0.27984513121788457, 0.38711592356596247, 0.379904045583645, 0.3461111841342813},
            {0.4887971308094512, 0.6482909049664126, 0.39953846627759015, 0.5668541758247011, 0.08964353086358812, 0.849115535553987, 0.6513045306321537, 0.9831044659503532, 0.48820010298092065, 0.13880203542178193, 0.26359316704214597, 0.8861549754768187, 0.304589385531465, 0.6747329957591621, 0.6289192430046898, 0.9324263306377011, 0.05809575659890398, 0.4492092208988505, 0.8746394059806692, 0.29363280795667823},
            {0.5472275110936989, 0.8418990238393554, 0.32771972320643616, 0.9502676774664335, 0.17525989171495882, 0.879952908963372, 0.9079101491599727, 0.18898473171262808, 0.6600109724038177, 0.47778690809626734, 0.3377839573566357, 0.04511814244824652, 0.5363274875073816, 0.24982669768867627, 0.29345183793426066, 0.6434955619429462, 0.6107356981952309, 0.8420439545367382, 0.13636238408577495, 0.13386445423318338},
            {0.05993745279293983, 0.11190528120061816, 0.6644514104725476, 0.19166495030602282, 0.17830957087428612, 0.9013927928733649, 0.40000506474500586, 0.860547467607423, 0.8742900636573012, 0.5940454757947153, 0.2919525372380296, 0.8499460440925033, 0.8915121893448142, 0.12450830593338669, 0.35190602600629806, 0.26918420451121805, 0.38777320624739076, 0.6178659235937295, 0.6661172527238971, 0.1790023025103168},
            {0.9434017004415263, 0.37607684673976416, 0.42962120488961675, 0.27206104250629404, 0.2903137700116185, 0.5001122367298058, 0.13418930358582282, 0.4558886640286127, 0.05402478535052513, 0.03894387481186079, 0.8083161915601328, 0.10490428375428018, 0.5831103168817905, 0.1903135589990338, 0.25531523901342046, 0.2725632177484334, 0.5040860550332622, 0.7432560873537827, 0.5646999689637616, 0.21033459461277482},
            {0.9844033642320631, 0.6486369130917724, 0.782379898757034, 0.1271356994060171, 0.8122333806164584, 0.33150439294462364, 0.5168009564027456, 0.24101110932635883, 0.3089396082744307, 0.11784561582040776, 0.431012123486478, 0.8242591214387516, 0.7786149582789025, 0.9383743174887329, 0.024741578471319636, 0.12387205299760884, 0.6687861202523017, 0.2932677941717603, 0.8459171715347348, 0.7510706416528355},
            {0.8673647165540321, 0.31430937792696745, 0.28766761429911014, 0.37687752085323367, 0.5931509091468786, 0.6446815453761289, 0.4246921509909678, 0.34508798737324786, 0.1506721859541783, 0.7716944083478171, 0.9219886155775319, 0.11966111252818923, 0.4148661887317021, 0.3940227961719309, 0.9092804073034728, 0.32046777058308074, 0.2870931333615728, 0.38256460496736333, 0.8560855663604466, 0.469496483065993},
            {0.5211903478093022, 0.9028221436876068, 0.905221555336538, 0.46903188427296827, 0.2567570438390946, 0.30674676052689964, 0.826642140169574, 0.26398498036687, 0.31658516263099235, 0.47327702369238855, 0.7388529842831241, 0.10246801003385853, 0.8261278938668901, 0.37933877495213886, 0.011755585834886229, 0.30187092997084863, 0.9951242130808485, 0.8168652725707649, 0.3126193381128213, 0.4521110157097311},
            {0.9649745296258387, 0.33643400968038284, 0.5859839626789259, 0.543390386730155, 0.47018900437200417, 0.6944065554321136, 0.8686461948377673, 0.5927109229662195, 0.6882064759358096, 0.3079962521246157, 0.23248524238522106, 0.9615599515109233, 0.05910886759501255, 0.4814777788643956, 0.8207341567033368, 0.7065939628214166, 0.045232003559742995, 0.45679204394540984, 0.8974052887323744, 0.98581182265586},
            {0.7704010291076991, 0.6630885658626113, 0.06492947772874169, 0.7546231366023064, 0.22949427303092085, 0.8922862662594766, 0.3216704933043246, 0.7293811513566583, 0.29126695935915736, 0.511523634147232, 0.42882774617815567, 0.8703640627656176, 0.030841913327882886, 0.23840729587149445, 0.13534143015784705, 0.4418521612404417, 0.023001353884408604, 0.4512574923016319, 0.16976665152995407, 0.043862892124991726},
            {0.10339048685370278, 0.4840882142539149, 0.5496837769443644, 0.8782692726823884, 0.7619699241176043, 0.8648484216036054, 0.6820642417659764, 0.9114421091761672, 0.7715307743609882, 0.9954900629864144, 0.9321128878188801, 0.5262192972680437, 0.8738124178155167, 0.34371767207005643, 0.8234586930978182, 0.7179208306987148, 0.3467403238287359, 0.8188133666093681, 0.7991680793685887, 0.8822911738854698},
            {0.05852672636422973, 0.6377199837731738, 0.5209061246119316, 0.7676654267766079, 0.1778545471096975, 0.6526044455942394, 0.012672798827139342, 0.21931927461783784, 0.05409089364155062, 0.8074121442581449, 0.5658925172034452, 0.9308771573725506, 0.9074533836712906, 0.11846256902190577, 0.21423742871110119, 0.5358168338729973, 0.8762787421470192, 0.33292528333878624, 0.7594160383124823, 0.02152288056634455}
    };

    int taskNum = 20;
    Random random = new Random();
    List<Integer> bestSol; // 全局最优解
    double temperature = 1;
    double alpha = 0.98;

    // 计算成本
    double getCost(List<Integer> sol) {
        double cost = 0;
        for (int i = 0; i < sol.size(); i++) {
            cost += eff[i][sol.get(i)];
        }
        return cost;
    }

    // 邻项搜索
    void localSearch(List<Integer> sol) {
        int pos1 = random.nextInt(sol.size() - 1);
        int pos2 = random.nextInt(sol.size() - 1);
        Collections.swap(sol, pos1, pos2);
    }

    // 内循环
    List<Integer> inner(List<Integer> sol) {
        for (int i = 0; i < 10; i++) {
            List<Integer> tempSol = new ArrayList<>(sol);
            localSearch(tempSol);
            double c1 = getCost(sol);
            double c2 = getCost(tempSol);
            if (c1 > c2) {
                double c3 = getCost(bestSol);
                if (c2 > c3) {
                    bestSol = new ArrayList<>(tempSol);
                }
                sol = tempSol;
            } else {
                if (Math.exp((c1 - c2) / temperature) > Math.random()) {
                    sol = tempSol;
                }
            }
        }
        return sol;
    }

    void solve() {
        // 初始解
        List<Integer> sol = new ArrayList<>();
        for (int i = 0; i < taskNum; i++) sol.add(i);
        System.out.println(getCost(sol));

        bestSol = new ArrayList<>(sol);
        List<Double> costs = new ArrayList<>();
        for (int i = 0; i < 500; i++) {
            sol = inner(sol);
            costs.add(getCost(sol));
            temperature *= alpha;
        }
        System.out.println(costs);
        System.out.println(sol);
    }

    public static void main(String[] args) {
        SimulatedAnnealing sa = new SimulatedAnnealing();
        sa.solve();
    }
}
/*
9.740723651151981

1.855959249180531
[6, 17, 3, 5, 1, 7, 2, 18, 13, 4, 11, 10, 9, 15, 8, 14, 16, 12, 0, 19]
 */
