package c377;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Abc377_e {
    static int n;
    static long k;
    static int[] p;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        k = scanner.nextLong();
        p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = scanner.nextInt() - 1;
        }
        System.out.println(solve());
    }

    private static String solve() {
        // 打表
//        for (int k = 0; k < 50; k++) {
//            int[] newp = new int[n + 1];
//            for (int i = 1; i <= n; i++) {
//                newp[i] = p[p[i]];
//            }
//            System.out.println(Arrays.toString(newp));
//            p = newp;
//        }

        int[] ans = new int[n];
        boolean[] used = new boolean[n];
        for (int i = 0; i < n; i++) {
            if (!used[i]) {
                List<Integer> cycle = new ArrayList<>();
                for (int j = i; !used[j]; j = p[j]) {
                    used[j] = true;
                    cycle.add(j);
                }
                int cycle_length = cycle.size();
                int shift = (int) quickPow(2, k, cycle_length);
                for (int j = 0; j < cycle_length; j++) {
                    ans[cycle.get(j)] = cycle.get((j + shift) % cycle_length);
                }
            }
        }
        return Arrays.stream(ans).map(i -> i + 1).mapToObj(String::valueOf).collect(Collectors.joining(" "));
    }

    // 快速幂 res = a^b % mod
    static long quickPow(long a, long b, int MOD) {
        long res = 1;
        while (b > 0) {
            if ((b & 1) != 0) res = res * a % MOD;
            a = a * a % MOD;
            b >>= 1;
        }
        return res;
    }
}
/*
E - Permute K times
https://atcoder.jp/contests/abc377/tasks/abc377_e

题目大意：
给你一个 $(1,2,\ldots,N)$ 的排列组合 $P=(P_1,P_2,\ldots,P_N)$ 。
下面的操作将进行 $K$ 次：
- 对于 $i=1,2,\ldots,N$ ，**同时**更新 $P_i$ 至 $P_{P_i}$ 。
完成所有操作后，打印 $P$ 。
#### 限制因素
- $1\leq N\leq2\times10^5$
- $1\leq K\leq10^{18}$
- $1\leq P_i\leq N\ (1\leq i\leq N)$
- $P_i\neq P_j\ (1\leq i\lt j\leq N)$
- 所有输入值均为整数。

yangjl：并不是 i->pi，第二轮是 (i->pi)^2，跟 2 的次幂有关
https://atcoder.jp/contests/abc377/submissions/59185751
https://atcoder.jp/contests/abc377/editorial/11241
打表：
[0, 4, 25, 19, 14, 1, 7, 23, 12, 20, 2, 26, 11, 15, 21, 13, 3, 22, 24, 9, 29, 18, 17, 28, 5, 6, 16, 8, 10, 27]
[0, 14, 6, 9, 21, 4, 23, 28, 11, 29, 25, 16, 26, 13, 18, 15, 19, 17, 5, 20, 27, 24, 22, 10, 1, 7, 3, 12, 2, 8]
[0, 18, 23, 29, 24, 21, 10, 2, 16, 8, 7, 19, 3, 13, 5, 15, 20, 17, 4, 27, 12, 1, 22, 25, 14, 28, 9, 26, 6, 11]
[0, 4, 25, 11, 14, 1, 7, 23, 20, 16, 2, 27, 29, 13, 21, 15, 12, 17, 24, 26, 3, 18, 22, 28, 5, 6, 8, 9, 10, 19]
[0, 14, 6, 27, 21, 4, 23, 28, 3, 12, 25, 9, 19, 13, 18, 15, 29, 17, 5, 8, 11, 24, 22, 10, 1, 7, 20, 16, 2, 26]
[0, 18, 23, 16, 24, 21, 10, 2, 27, 19, 7, 12, 8, 13, 5, 15, 26, 17, 4, 3, 9, 1, 22, 25, 14, 28, 11, 29, 6, 20]
[0, 4, 25, 26, 14, 1, 7, 23, 29, 3, 2, 8, 27, 13, 21, 15, 11, 17, 24, 16, 19, 18, 22, 28, 5, 6, 12, 20, 10, 9]
[0, 14, 6, 12, 21, 4, 23, 28, 9, 26, 25, 29, 20, 13, 18, 15, 8, 17, 5, 11, 16, 24, 22, 10, 1, 7, 27, 19, 2, 3]
[0, 18, 23, 20, 24, 21, 10, 2, 26, 27, 7, 3, 16, 13, 5, 15, 9, 17, 4, 29, 8, 1, 22, 25, 14, 28, 19, 11, 6, 12]
[0, 4, 25, 8, 14, 1, 7, 23, 19, 11, 2, 20, 9, 13, 21, 15, 27, 17, 24, 12, 26, 18, 22, 28, 5, 6, 29, 3, 10, 16]
[0, 14, 6, 19, 21, 4, 23, 28, 12, 20, 25, 26, 11, 13, 18, 15, 3, 17, 5, 9, 29, 24, 22, 10, 1, 7, 16, 8, 2, 27]
[0, 18, 23, 9, 24, 21, 10, 2, 11, 29, 7, 16, 26, 13, 5, 15, 19, 17, 4, 20, 27, 1, 22, 25, 14, 28, 3, 12, 6, 8]
[0, 4, 25, 29, 14, 1, 7, 23, 16, 8, 2, 19, 3, 13, 21, 15, 20, 17, 24, 27, 12, 18, 22, 28, 5, 6, 9, 26, 10, 11]
[0, 14, 6, 11, 21, 4, 23, 28, 20, 16, 25, 27, 29, 13, 18, 15, 12, 17, 5, 26, 3, 24, 22, 10, 1, 7, 8, 9, 2, 19]
[0, 18, 23, 27, 24, 21, 10, 2, 3, 12, 7, 9, 19, 13, 5, 15, 29, 17, 4, 8, 11, 1, 22, 25, 14, 28, 20, 16, 6, 26]
[0, 4, 25, 16, 14, 1, 7, 23, 27, 19, 2, 12, 8, 13, 21, 15, 26, 17, 24, 3, 9, 18, 22, 28, 5, 6, 11, 29, 10, 20]
[0, 14, 6, 26, 21, 4, 23, 28, 29, 3, 25, 8, 27, 13, 18, 15, 11, 17, 5, 16, 19, 24, 22, 10, 1, 7, 12, 20, 2, 9]
[0, 18, 23, 12, 24, 21, 10, 2, 9, 26, 7, 29, 20, 13, 5, 15, 8, 17, 4, 11, 16, 1, 22, 25, 14, 28, 27, 19, 6, 3]
[0, 4, 25, 20, 14, 1, 7, 23, 26, 27, 2, 3, 16, 13, 21, 15, 9, 17, 24, 29, 8, 18, 22, 28, 5, 6, 19, 11, 10, 12]
[0, 14, 6, 8, 21, 4, 23, 28, 19, 11, 25, 20, 9, 13, 18, 15, 27, 17, 5, 12, 26, 24, 22, 10, 1, 7, 29, 3, 2, 16]
[0, 18, 23, 19, 24, 21, 10, 2, 12, 20, 7, 26, 11, 13, 5, 15, 3, 17, 4, 9, 29, 1, 22, 25, 14, 28, 16, 8, 6, 27]
[0, 4, 25, 9, 14, 1, 7, 23, 11, 29, 2, 16, 26, 13, 21, 15, 19, 17, 24, 20, 27, 18, 22, 28, 5, 6, 3, 12, 10, 8]
[0, 14, 6, 29, 21, 4, 23, 28, 16, 8, 25, 19, 3, 13, 18, 15, 20, 17, 5, 27, 12, 24, 22, 10, 1, 7, 9, 26, 2, 11]
[0, 18, 23, 11, 24, 21, 10, 2, 20, 16, 7, 27, 29, 13, 5, 15, 12, 17, 4, 26, 3, 1, 22, 25, 14, 28, 8, 9, 6, 19]
[0, 4, 25, 27, 14, 1, 7, 23, 3, 12, 2, 9, 19, 13, 21, 15, 29, 17, 24, 8, 11, 18, 22, 28, 5, 6, 20, 16, 10, 26]
[0, 14, 6, 16, 21, 4, 23, 28, 27, 19, 25, 12, 8, 13, 18, 15, 26, 17, 5, 3, 9, 24, 22, 10, 1, 7, 11, 29, 2, 20]
[0, 18, 23, 26, 24, 21, 10, 2, 29, 3, 7, 8, 27, 13, 5, 15, 11, 17, 4, 16, 19, 1, 22, 25, 14, 28, 12, 20, 6, 9]
[0, 4, 25, 12, 14, 1, 7, 23, 9, 26, 2, 29, 20, 13, 21, 15, 8, 17, 24, 11, 16, 18, 22, 28, 5, 6, 27, 19, 10, 3]
[0, 14, 6, 20, 21, 4, 23, 28, 26, 27, 25, 3, 16, 13, 18, 15, 9, 17, 5, 29, 8, 24, 22, 10, 1, 7, 19, 11, 2, 12]
[0, 18, 23, 8, 24, 21, 10, 2, 19, 11, 7, 20, 9, 13, 5, 15, 27, 17, 4, 12, 26, 1, 22, 25, 14, 28, 29, 3, 6, 16]
[0, 4, 25, 19, 14, 1, 7, 23, 12, 20, 2, 26, 11, 13, 21, 15, 3, 17, 24, 9, 29, 18, 22, 28, 5, 6, 16, 8, 10, 27]
[0, 14, 6, 9, 21, 4, 23, 28, 11, 29, 25, 16, 26, 13, 18, 15, 19, 17, 5, 20, 27, 24, 22, 10, 1, 7, 3, 12, 2, 8]
[0, 18, 23, 29, 24, 21, 10, 2, 16, 8, 7, 19, 3, 13, 5, 15, 20, 17, 4, 27, 12, 1, 22, 25, 14, 28, 9, 26, 6, 11]
[0, 4, 25, 11, 14, 1, 7, 23, 20, 16, 2, 27, 29, 13, 21, 15, 12, 17, 24, 26, 3, 18, 22, 28, 5, 6, 8, 9, 10, 19]
[0, 14, 6, 27, 21, 4, 23, 28, 3, 12, 25, 9, 19, 13, 18, 15, 29, 17, 5, 8, 11, 24, 22, 10, 1, 7, 20, 16, 2, 26]
[0, 18, 23, 16, 24, 21, 10, 2, 27, 19, 7, 12, 8, 13, 5, 15, 26, 17, 4, 3, 9, 1, 22, 25, 14, 28, 11, 29, 6, 20]
[0, 4, 25, 26, 14, 1, 7, 23, 29, 3, 2, 8, 27, 13, 21, 15, 11, 17, 24, 16, 19, 18, 22, 28, 5, 6, 12, 20, 10, 9]
[0, 14, 6, 12, 21, 4, 23, 28, 9, 26, 25, 29, 20, 13, 18, 15, 8, 17, 5, 11, 16, 24, 22, 10, 1, 7, 27, 19, 2, 3]
[0, 18, 23, 20, 24, 21, 10, 2, 26, 27, 7, 3, 16, 13, 5, 15, 9, 17, 4, 29, 8, 1, 22, 25, 14, 28, 19, 11, 6, 12]
[0, 4, 25, 8, 14, 1, 7, 23, 19, 11, 2, 20, 9, 13, 21, 15, 27, 17, 24, 12, 26, 18, 22, 28, 5, 6, 29, 3, 10, 16]
[0, 14, 6, 19, 21, 4, 23, 28, 12, 20, 25, 26, 11, 13, 18, 15, 3, 17, 5, 9, 29, 24, 22, 10, 1, 7, 16, 8, 2, 27]
[0, 18, 23, 9, 24, 21, 10, 2, 11, 29, 7, 16, 26, 13, 5, 15, 19, 17, 4, 20, 27, 1, 22, 25, 14, 28, 3, 12, 6, 8]
[0, 4, 25, 29, 14, 1, 7, 23, 16, 8, 2, 19, 3, 13, 21, 15, 20, 17, 24, 27, 12, 18, 22, 28, 5, 6, 9, 26, 10, 11]
[0, 14, 6, 11, 21, 4, 23, 28, 20, 16, 25, 27, 29, 13, 18, 15, 12, 17, 5, 26, 3, 24, 22, 10, 1, 7, 8, 9, 2, 19]
[0, 18, 23, 27, 24, 21, 10, 2, 3, 12, 7, 9, 19, 13, 5, 15, 29, 17, 4, 8, 11, 1, 22, 25, 14, 28, 20, 16, 6, 26]
[0, 4, 25, 16, 14, 1, 7, 23, 27, 19, 2, 12, 8, 13, 21, 15, 26, 17, 24, 3, 9, 18, 22, 28, 5, 6, 11, 29, 10, 20]
[0, 14, 6, 26, 21, 4, 23, 28, 29, 3, 25, 8, 27, 13, 18, 15, 11, 17, 5, 16, 19, 24, 22, 10, 1, 7, 12, 20, 2, 9]
[0, 18, 23, 12, 24, 21, 10, 2, 9, 26, 7, 29, 20, 13, 5, 15, 8, 17, 4, 11, 16, 1, 22, 25, 14, 28, 27, 19, 6, 3]
[0, 4, 25, 20, 14, 1, 7, 23, 26, 27, 2, 3, 16, 13, 21, 15, 9, 17, 24, 29, 8, 18, 22, 28, 5, 6, 19, 11, 10, 12]
[0, 14, 6, 8, 21, 4, 23, 28, 19, 11, 25, 20, 9, 13, 18, 15, 27, 17, 5, 12, 26, 24, 22, 10, 1, 7, 29, 3, 2, 16]
======

Input 1
6 3
5 6 3 1 2 4
Output 1
6 1 3 2 4 5

Input 2
5 1000000000000000000
1 2 3 4 5
Output 2
1 2 3 4 5

Input 3
29 51912426
7 24 8 23 6 1 4 19 11 18 20 9 17 28 22 27 15 2 12 26 10 13 14 25 5 29 3 21 16
Output 3
18 23 16 24 21 10 2 27 19 7 12 8 13 5 15 26 17 4 3 9 1 22 25 14 28 11 29 6 20
 */
